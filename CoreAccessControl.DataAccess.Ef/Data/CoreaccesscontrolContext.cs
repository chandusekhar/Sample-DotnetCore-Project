// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using CoreAccessControl.DataAccess.Ef.Models;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using CoreAccessControl.DataAccess.Ef.Models;

namespace CoreAccessControl.DataAccess.Ef.Data
{
    public partial class CoreaccesscontrolContext : DbContext
    {
        public CoreaccesscontrolContext()
        {
        }

        public CoreaccesscontrolContext(DbContextOptions<CoreaccesscontrolContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ChangeEmailRequest> ChangeEmailRequest { get; set; }
        public virtual DbSet<Device> Device { get; set; }
        public virtual DbSet<DeviceSpace> DeviceSpace { get; set; }
        public virtual DbSet<Devicestatus> Devicestatus { get; set; }
        public virtual DbSet<KeyHolder> KeyHolder { get; set; }
        public virtual DbSet<KeyholderDevice> KeyholderDevice { get; set; }
        public virtual DbSet<KeyholderSpace> KeyholderSpace { get; set; }
        public virtual DbSet<KeyholderStatus> KeyholderStatus { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<Space> Space { get; set; }
        public virtual DbSet<SpaceStatus> SpaceStatus { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserActivity> UserActivity { get; set; }
        public virtual DbSet<UserKeyMapping> UserKeyMapping { get; set; }
        public virtual DbSet<UserLocation> UserLocation { get; set; }
        public virtual DbSet<UserPermission> UserPermission { get; set; }
        public virtual DbSet<UserStatus> UserStatus { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ChangeEmailRequest>(entity =>
            {
                entity.HasIndex(e => e.UserId)
                    .HasName("FK_EmailChange_User");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.VerificationToken).IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ChangeEmailRequest)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChangeEmailRequest_User");
            });

            modelBuilder.Entity<Device>(entity =>
            {
                entity.HasIndex(e => e.LocationId)
                    .HasName("FK_locationId_idx");

                entity.HasIndex(e => e.StatusId)
                    .HasName("fk_device_status_idx");

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.SerialNumber).IsUnicode(false);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Device)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_device_location");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Device)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("fk_device_status");
            });

            modelBuilder.Entity<DeviceSpace>(entity =>
            {
                entity.HasIndex(e => e.DeviceId)
                    .HasName("fk_DeviceSpace_Device_idx");

                entity.HasIndex(e => e.SpaceId)
                    .HasName("FK_DeviceSpace_Space");

                entity.HasOne(d => d.Device)
                    .WithMany(p => p.DeviceSpace)
                    .HasForeignKey(d => d.DeviceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_DeviceSpace_Device");

                entity.HasOne(d => d.Space)
                    .WithMany(p => p.DeviceSpace)
                    .HasForeignKey(d => d.SpaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceSpace_Space");
            });

            modelBuilder.Entity<Devicestatus>(entity =>
            {
                entity.HasIndex(e => e.CreatedBy)
                    .HasName("fk_createdBy_user_idx");

                entity.HasIndex(e => e.LastUpdatedBy)
                    .HasName("fk_updatedBy_user_idx");

                entity.HasIndex(e => e.LocationId)
                    .HasName("FK_locationId_idx");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Devicestatus)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_locationId");
            });

            modelBuilder.Entity<KeyHolder>(entity =>
            {
                entity.HasIndex(e => e.KeySerialNumber)
                    .HasName("KeySerialNumber_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => e.LocationId)
                    .HasName("FK_locationId_idx");

                entity.HasIndex(e => e.StatusId)
                    .HasName("fk_status_KeyholderStatus_idx");

                entity.Property(e => e.KeySerialNumber).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Pin)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.KeyHolder)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Location");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.KeyHolder)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("fk_status_KeyholderStatus");
            });

            modelBuilder.Entity<KeyholderDevice>(entity =>
            {
                entity.HasIndex(e => e.DeviceId)
                    .HasName("FK_KeyholderDevice_Device_idx");

                entity.HasIndex(e => e.KeyHolderId)
                    .HasName("fk_KeyholderDevice_Keyholder_idx");

                entity.HasOne(d => d.Device)
                    .WithMany(p => p.KeyholderDevice)
                    .HasForeignKey(d => d.DeviceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KeyholderDevice_Device");

                entity.HasOne(d => d.KeyHolder)
                    .WithMany(p => p.KeyholderDevice)
                    .HasForeignKey(d => d.KeyHolderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_KeyholderSpace_Keyholder0");
            });

            modelBuilder.Entity<KeyholderSpace>(entity =>
            {
                entity.HasIndex(e => e.KeyHolderId)
                    .HasName("fk_KeyholderSpace_Keyholder_idx");

                entity.HasIndex(e => e.SpaceId)
                    .HasName("FK_KeyholderSpace_Space");

                entity.HasOne(d => d.KeyHolder)
                    .WithMany(p => p.KeyholderSpace)
                    .HasForeignKey(d => d.KeyHolderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_KeyholderSpace_Keyholder");

                entity.HasOne(d => d.Space)
                    .WithMany(p => p.KeyholderSpace)
                    .HasForeignKey(d => d.SpaceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_KeyholderSpace_Space0");
            });

            modelBuilder.Entity<KeyholderStatus>(entity =>
            {
                entity.HasIndex(e => e.CreatedBy)
                    .HasName("fk_createdBy_user_idx");

                entity.HasIndex(e => e.LastUpdatedBy)
                    .HasName("fk_updatedBy_user_idx");

                entity.HasIndex(e => e.LocationId)
                    .HasName("FK_locationId_idx");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.KeyholderStatus)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_locationId00");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<Space>(entity =>
            {
                entity.HasIndex(e => e.CreatedBy)
                    .HasName("fk_createdBy_user_idx");

                entity.HasIndex(e => e.LastUpdatedBy)
                    .HasName("fk_updatedBy_user_idx");

                entity.HasIndex(e => e.LocationId)
                    .HasName("FK_locationId_idx");

                entity.HasIndex(e => e.StatusId)
                    .HasName("fk_SpaceStatus_idx");

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.Space)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Space_location");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Space)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("fk_SpaceStatus");
            });

            modelBuilder.Entity<SpaceStatus>(entity =>
            {
                entity.HasIndex(e => e.CreatedBy)
                    .HasName("fk_createdBy_user_idx");

                entity.HasIndex(e => e.LastUpdatedBy)
                    .HasName("fk_updatedBy_user_idx");

                entity.HasIndex(e => e.LocationId)
                    .HasName("FK_locationId_idx");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.SpaceStatus)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_locationId0");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasIndex(e => e.Email)
                    .HasName("Email_UNIQUE")
                    .IsUnique();

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.SecurityQuestion).IsUnicode(false);

                entity.Property(e => e.SecurityQuestionAnswer).IsUnicode(false);

                entity.Property(e => e.VerificationToken).IsUnicode(false);
            });

            modelBuilder.Entity<UserActivity>(entity =>
            {
                entity.HasIndex(e => e.LocationId)
                    .HasName("fk_UserLocation_Location_idx");

                entity.HasIndex(e => e.UserId)
                    .HasName("FK_UserActivity_User");

                entity.Property(e => e.ActivityText).IsUnicode(false);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.UserActivity)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_UserLocation_Location");
            });

            modelBuilder.Entity<UserKeyMapping>(entity =>
            {
                entity.HasIndex(e => e.KeySerialNumber)
                    .HasName("fk_UserKeyMapping_idx");

                entity.HasIndex(e => e.LocationId)
                    .HasName("FK_UserToolkit_Location");

                entity.HasIndex(e => e.UserId)
                    .HasName("fk_user_idx");

                entity.Property(e => e.KeySerialNumber).IsUnicode(false);

                entity.HasOne(d => d.KeySerialNumberNavigation)
                    .WithMany(p => p.UserKeyMapping)
                    .HasPrincipalKey(p => p.KeySerialNumber)
                    .HasForeignKey(d => d.KeySerialNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_UserKeyMapping");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.UserKeyMapping)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserToolkit_Location");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserKeyMapping)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<UserLocation>(entity =>
            {
                entity.HasIndex(e => e.CreatedBy)
                    .HasName("FK_UserLocations_User_CreatedBy_idx");

                entity.HasIndex(e => e.LastUpdatedBy)
                    .HasName("FK_LastUpdatedBy_User_idx");

                entity.HasIndex(e => e.LocationId)
                    .HasName("FK_UserLocationMap_Location");

                entity.HasIndex(e => e.StatusId)
                    .HasName("fk_UserStatus_idx");

                entity.HasIndex(e => e.UserId)
                    .HasName("FK_UserLocationMap_User");

                entity.HasIndex(e => new { e.UserId, e.LocationId })
                    .HasName("UQ_userId_location")
                    .IsUnique();

                entity.Property(e => e.DisabledReason).IsUnicode(false);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.UserLocation)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLocationMap_Location");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.UserLocation)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("fk_UserStatus");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserLocation)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLocation_User");
            });

            modelBuilder.Entity<UserPermission>(entity =>
            {
                entity.HasIndex(e => e.LastUpdatedBy)
                    .HasName("fk_last_updated_by_user_Id_idx");

                entity.HasIndex(e => e.UserLocationId)
                    .HasName("fk_userlocation_id_permission_id_idx");

                entity.HasOne(d => d.UserLocation)
                    .WithMany(p => p.UserPermission)
                    .HasForeignKey(d => d.UserLocationId)
                    .HasConstraintName("fk_userlocation_id_permission_id");
            });

            modelBuilder.Entity<UserStatus>(entity =>
            {
                entity.HasIndex(e => e.CreatedBy)
                    .HasName("fk_createdBy_user_idx");

                entity.HasIndex(e => e.LastUpdatedBy)
                    .HasName("fk_updatedBy_user_idx");

                entity.HasIndex(e => e.LocationId)
                    .HasName("FK_EmailChange_User");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.UserStatus)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_locationId1");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}